rbPal <- colorRampPalette(c("yellow", "red"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=5
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(igraph)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
E(GRPH)$xx
E(GRPH)$xx
E(GRPH)$xx
E(GRPH)$xx
#------
gd <- read.csv("na1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
colnames(gd) <- rownames(gd)
gd[1:4,1:4]
hist(as.matrix(gd))
eu1_mac_tre <- aboot(as.matrix(gdm),
sample = 100, showtree = T, tree = "nj")
class(eu1_mac_tre)
all.dis <- get_all_distances_to_root(gd)
library(poppr)
library(castor)
all.dis <- get_all_distances_to_root(gd)
gd
eu1_mac_tre <- aboot(as.matrix(gd),
sample = 100, showtree = T, tree = "nj")
class(eu1_mac_tre)
all.dis <- get_all_distances_to_root(eu1_mac_tre)
all.dis
get_all_distances_to_root
dist.nodes(eu1_mac_tre)
eu1_mac_tre
eu1_mac_tre$edge
eu1_mac_tre$edge.length
eu1_mac_tre <- aboot(as.matrix(gd),
sample = 100, showtree = T, tree = "nj")
class(eu1_mac_tre)
eu1_mac_tre$edge
# long format
# gd1 <- as.data.frame(gd)#$`7612-A1`)
# rownames(gd1) <- rownames(gd)
# gdnet <- melt(as.matrix(gd1))
colnames(eu1_mac_tre) <- c("From", "To")
eu1_mac_tre
gd <- eu1_mac_tre$edge
gd
gdnet <- eu1_mac_tre$edge
gdnet$length <- eu1_mac_tre$edge.length
gdnet
gdnet <- eu1_mac_tre$edge
eu1_mac_tre$edge.length
gdnet$length <- unlist(eu1_mac_tre$edge.length)
unlist(eu1_mac_tre$edge.length)
eu1_mac_tre$edge.length
as.numeric(eu1_mac_tre$edge.length)
gdnet <- eu1_mac_tre$edge
gdnet$length <- as.numeric(eu1_mac_tre$edge.length)
gdnet <- as.data.frame(eu1_mac_tre$edge)
gdnet$length <- as.numeric(eu1_mac_tre$edge.length)
# long format
# gd1 <- as.data.frame(gd)#$`7612-A1`)
# rownames(gd1) <- rownames(gd)
# gdnet <- melt(as.matrix(gd1))
colnames(gdnet) <- c("From", "To", "value")
head(gdnet)
gdnet[!rowSums(gdnet[-c(1:2)] == 0) >= 1,]
gdnet
# gdnet$To <- rep("7612-A",dim(gdnet)[1],)
#
gdnet0 <- gdnet #[!rowSums(gdnet[-c(1:2)] == 0) >= 1,] #removing 0's
# gdnet$To <- rep("7612-A",dim(gdnet)[1],)
#
# gdnet0 <- gdnet[!rowSums(gdnet[-c(1:2)] == 0) >= 1,] #removing 0's
# gdnet <- gdnet0[gdnet0[-c(1:2)] > 0,] # setting up the treshold
head(gdnet)
hist(gdnet$value, breaks= 100)
summary(gdnet)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("yellow", "red"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=5
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(igraph)$color))
hist(gd0, xlim = c(0,0.4))
eu1_mac_tre <- aboot(as.matrix(gd),
sample = 100, showtree = T, tree = "nj")
class(eu1_mac_tre)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
colnames(gd) <- rownames(gd)
gd[1:4,1:4]
gd0 = gd[gd > 0]
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
colnames(gd) <- rownames(gd)
gd[1:4,1:4]
gd0 = gd[gd > 0]
hist(gd0, xlim = c(0,0.4))
eu1_mac_tre <- aboot(as.matrix(gd),
sample = 100, showtree = T, tree = "nj")
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
colnames(gd) <- rownames(gd)
gd[1:4,1:4]
gd0 = gd[gd > 0]
hist(gd0, xlim = c(0,0.4))
eu1_mac_tre <- aboot(as.matrix(gd),
sample = 100, showtree = T, tree = "nj")
class(eu1_mac_tre)
eu1_mac_tre$edge.length
gdnet <- as.data.frame(eu1_mac_tre$edge)
gdnet$length <- as.numeric(eu1_mac_tre$edge.length)
# long format
# gd1 <- as.data.frame(gd)#$`7612-A1`)
# rownames(gd1) <- rownames(gd)
# gdnet <- melt(as.matrix(gd1))
colnames(gdnet) <- c("From", "To", "value")
head(gdnet)
# gdnet$To <- rep("7612-A",dim(gdnet)[1],)
#
# gdnet0 <- gdnet[!rowSums(gdnet[-c(1:2)] == 0) >= 1,] #removing 0's
# gdnet <- gdnet0[gdnet0[-c(1:2)] > 0,] # setting up the treshold
hist(gdnet$value, breaks= 100)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("yellow", "red"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=5
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(igraph)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',edge.curved=T, edge.width=0.2, layout=layout_with_kk)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("grey", "black"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=5
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(igraph)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',edge.curved=T, edge.width=0.2, layout=layout_with_kk)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("grey", "black"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=10
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(igraph)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
# Remove edges nodes
GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',
edge.curved = F, edge.width=0.2, layout=layout_with_kk)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("grey", "black"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=10
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(igraph)$color))
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("grey", "black"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=10
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(igraph)$color))
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(GRPH)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
# Remove edges nodes
# GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',
edge.curved = F, edge.width=0.2, layout=layout_with_kk)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("grey", "black"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=7
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(GRPH)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
# Remove edges nodes
# GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',
edge.curved = F, edge.width=0.2, layout=layout_with_kk)
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("orange", "red"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=7
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(GRPH)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# E(igraph)$color <- rbPal(10)[cut(as.numeric(E(igraph)$xx),breaks = 3)]
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
# Remove edges nodes
# GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',
edge.curved = F, edge.width=0.5, layout=layout_with_kk)
# legend(x= 0.9, y= -0.9, CounColor[,1], pch=21,  col="black", pt.bg=CounColor[,2], pt.cex=2,cex=.8, bty="n", ncol=1)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("orange", "red"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=7
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(GRPH)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
# Remove edges nodes
# GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',
edge.curved = F, edge.width=1, layout=layout_with_kk)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("grey", "black"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=7
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(GRPH)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# Identify isolated nodes
cond  <- E(GRPH)[E(GRPH)$xx <=  0.125 ]
# Remove edges nodes
# GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
# Identify isolated nodes
hist(E(GRPH)$xx, breaks= 100)
E(GRPH)$xx
hline(0.0025)
abline(h=0.0025)
abline(v=0.0025)
# Identify isolated nodes
hist(E(GRPH)$xx, breaks= 100)
abline(v=0.0025, "red")
abline(v=0.0025, col="red")
cond  <- E(GRPH)[E(GRPH)$xx <=  0.0025 ]
# Remove edges nodes
GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',
edge.curved = F, edge.width=1, layout=layout_with_kk)
#----- Network
x = gdnet
GRPH <- graph_from_data_frame(x, directed = FALSE)
rbPal <- colorRampPalette(c("grey", "black"))
counPal <- colorRampPalette(c("red", "yellow", "blue", "white", "brown"), bias = 1)
V(GRPH)$size=7
# V(GRPH)$xx <- as.numeric(as.factor(V(GRPH))) # make the categories of x into numeric values for color ramp
# V(igraph)$color <- counPal(10)[cut(as.numeric(V(GRPH)$xx),breaks = 10)]
CounColor <- unique(cbind(V(GRPH)$Country, V(GRPH)$color))
E(GRPH)$xx <- x$value # make the categories of x into numeric values for color ramp
# E(igraph)$color <- rbPal(10)[cut(as.numeric(E(igraph)$xx),breaks = 3)]
# Identify isolated nodes
hist(E(GRPH)$xx, breaks= 100)
abline(v=0.0025, col="red")
cond  <- E(GRPH)[E(GRPH)$xx >=  0.0025 ]
# Remove edges nodes
GRPH <- delete.edges(GRPH, cond)
E(GRPH)$color <- rbPal(10)[cut(as.numeric(E(GRPH)$xx),breaks = 10)]
plot(GRPH,  edge.arrow.size=.05, vertex.label.cex=.3, vertex.label.color='black',
edge.curved = F, edge.width=1, layout=layout_with_kk)
# Identify isolated nodes
hist(E(GRPH)$xx, breaks= 100)
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.4))
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.25))
# recalculating distances
eu1_mac_tre <- aboot(as.matrix(gd),
sample = 100, showtree = T, tree = "nj")
eu1_mac_tre$edge.length
eu1_mac_tre$Nnode
eu1_mac_tre$node.label
gdnet <- as.data.frame(eu1_mac_tre$edge)
gdnet$length <- as.numeric(eu1_mac_tre$edge.length)
# recalculating distances
eu1_mac_tre <- aboot(as.matrix(gd),
sample = 100, showtree = T, tree = "nj")
# genetic distance from-to network
gdnet <- as.data.frame(eu1_mac_tre$edge)
gdnet$length <- as.numeric(eu1_mac_tre$edge.length)
colnames(gdnet) <- c("From", "To", "value")
head(gdnet)
hist(gdnet$value, breaks= 100)
NJTree()
install.packages("TreeTools")
library("TreeTools")
NJTree(gd)
ConstrainedNJ(gd, weight = 1L)
ConstrainedNJ(gd, constraint, weight = 1L)
MSTEdges(gd, plot = FALSE, x = NULL, y = NULL, ...)
MSTEdges(gd, plot = FALSE, x = NULL, y = NULL)
MSTEdges(gd, plot = FALSE, x = NULL, y = NULL)
MSTEdges(gd, plot = FALSE)
MSTEdges(gd, plot = T)
MSTLength(gd, mst = NULL)
MSTLength(gd)
MSTEdges(gd, plot = T)
aver <- MSTEdges(gd, plot = T)
aver
gd, plot = T
gd
aver <- MSTEdges(gd, plot = T)
MSTEdges
?
?MSTEdges
MSTEdges(gd, plot = T, mst)
MSTEdges(gd, plot = T, mst=NULL)
MSTEdges(gd, plot = F, mst=NULL)
MSTEdges(gd, plot = T)
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.25))
?aboot
MSTEdges(gd, plot = T)
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.25))
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.25), breaks = 100)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
eu1_mac_tre
gd
ConstrainedNJ(gd, constraint, weight = 1L)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.25), breaks = 100)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
dev.off()
dev.off()
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
?MSTEdges
plot()
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.25), breaks = 100)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
# Minimum Spaning Tree
MSTEdges(gd, plot = T, x = NULL, y = NULL)
# Minimum Spaning Tree
MSTEdges(gd, plot = T, x = NULL, y = NULL)
gd
# Minimum Spaning Tree
MSTEdges(gd, plot = T, x = NULL, y = NULL)
# Minimum Spaning Tree
MSTEdges(gd, plot = TRUE, x = NULL, y = NULL)
# ploting distances
hist(gd[gd > 0], xlim = c(0,0.25), breaks = 100)
#- setting working directory
setwd("~/Box/OSU/P_ramorum/data/")
#------ loading libraries
library(reshape2)
library(ggplot2)
library(ape)
library(igraph)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
colnames(gd) <- rownames(gd)
gd[1:4,1:4]
# Minimum Spaning Tree
MSTEdges(gd, plot = TRUE, x = NULL, y = NULL)
MSTLength(gd)
# Minimum Spaning Tree
MSTEdges(gd, plot = TRUE, x = NULL, y = NULL)
# Minimum Spaning Tree
MSTEdges(gd, plot = TRUE, x = NULL, y = NULL)
# Minimum Spaning Tree
MSTEdges(gd, plot = TRUE, x = 1, y = 1)
# Minimum Spaning Tree
MSTEdges(gd, plot = TRUE, x = c(0,1), y = c(0,1))
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
library(poppr)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
?MSTEdges
library(poppr)
library(TreeTools)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
# Minimum Spaning Tree
MSTEdges(gd)#, plot = T)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
?MSTEdges
class(gd)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
gd
class(gd)
as.numeric(gd)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.numeric()
gd
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ",
as.is=T) |>
as.numeric()
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ",
as.is=T) |>
as.matrix()
gd
class(gd)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ",
as.is=T) |>
as.matrix()
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ", as.is=T) |>
as.matrix()
gd
colnames(gd) <- rownames(gd)
class(gd)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
gd
dim(gd)
matrix(as.numeric(gd), nrow = 160)
names = rownames(gd)
gd<- matrix(as.numeric(gd), nrow = 160)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
names = rownames(gd)
gd<- matrix(as.numeric(gd), nrow = 160)
gd
colnames(gd) <- rownames(gd) <- names
gd[1:4,1:4]
class(gd)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
class(gd)
gd<- matrix(as.numeric(gd), nrow = 160)
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
names = rownames(gd)
gd<- matrix(as.numeric(gd), nrow = 160)
gd[1:4,1:4]
class(gd)
dev.off
dev.off()
dev.off()
dev.off()
#------
gd <- read.csv("eu1_gendists_snpsubset.txt", header = T, sep = " ") |>
as.matrix()
names = rownames(gd)
gd<- matrix(as.numeric(gd), nrow = 160)
colnames(gd) <- rownames(gd) <- names
gd[1:4,1:4]
class(gd)
# Minimum Spaning Tree
MSTEdges(gd, plot = T)
